{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,kBACpCE,EAAYH,SAASC,cAAc,iBACnCG,EAAcJ,SAASC,cAAc,mBAG3CF,EAAKM,iBAAiB,UAEtB,SAAkBC,GAChBA,EAAMC,iBACNC,QAAQC,IAAIP,EAAWQ,MAAON,EAAYM,MAAOP,EAAUO,OAC3D,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAYM,MAAOC,IAAK,CAC1C,IAAIC,GAAgBV,EAAWQ,QAASP,EAAUO,MAAQC,GAe9D,SAAuBE,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,KAlBLQ,CALgBX,EAAE,EAAIC,GAKSW,MAAK,SAAAC,G,IAAGC,EAAQD,EAARX,SAAUa,EAAKF,EAALV,MAChDa,EAAA9B,GAAS+B,OAAOC,QAAQ,uBAAwCC,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,IAGtEK,OAAM,SAAAP,G,IAAGC,EAAQD,EAARX,SAAUa,EAAKF,EAALV,MAElBa,EAAA9B,GAAS+B,OAAOI,QAAQ,sBAAuCF,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form')\nconst delayInput = document.querySelector('[name=\"delay\"]') \nconst stepInput = document.querySelector('[name=\"step\"]') \nconst amountInput = document.querySelector('[name=\"amount\"]') \n\n  \nform.addEventListener('submit', onSubmit)\n\nfunction onSubmit(event) {\n  event.preventDefault()\n  console.log(delayInput.value, amountInput.value, stepInput.value)\n  for (let i = 0; i < amountInput.value; i++) {\n    let currentDelay = +delayInput.value + +stepInput.value * i;\n    makePromises((i+1), currentDelay)\n  }\n}\n\nfunction makePromises(position, delay) {\n  createPromise(position, delay).then(({ position, delay }) => {\n   Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)\n  });\n}\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// createPromise(1, 1000)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayInput","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","addEventListener","event","preventDefault","console","log","value","i","currentDelay","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$ce04d3a99e08e73b$var$createPromise","then","param","_$position","_$delay","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.1d46bdda.js.map"}